Directory structure:
└── msfeldstein-mcp-test-servers/
    ├── README.md
    ├── package.json
    ├── pnpm-lock.yaml
    ├── .npmrc
    ├── src/
    │   ├── all-types-server.js
    │   ├── bad-param-server.js
    │   ├── big-response-server.js
    │   ├── broken-tool-server.js
    │   ├── cli.js
    │   ├── combined-server.js
    │   ├── crash-on-startup-server.js
    │   ├── duplicate-names-server.js
    │   ├── dynamic-tools-server.js
    │   ├── enum-param-server.js
    │   ├── env-check-server.js
    │   ├── env-echo-server.js
    │   ├── file-ops-server.js
    │   ├── headers-server.py
    │   ├── http-ping-server.js
    │   ├── image-server.js
    │   ├── long-description-server.js
    │   ├── long-running-server.js
    │   ├── many-resources-server.js
    │   ├── many-tools-server.js
    │   ├── math-server.js
    │   ├── named-server.js
    │   ├── number-param-server.js
    │   ├── oauth-ping-server.js
    │   ├── optional-param-server.js
    │   ├── pattern-param-server.js
    │   ├── ping-server.js
    │   ├── resource-server.js
    │   ├── root-echo-server.js
    │   ├── shell-exec-server.js
    │   ├── sse-notification-stream.js
    │   ├── sse-ping-server.js
    │   ├── stderr-server.js
    │   └── stdout-server.js
    └── .cursor/
        └── rules/
            ├── create-server.mdc
            └── .gitignore

================================================
FILE: README.md
================================================
# MCP Test Servers

A collection of test servers implementing the Model Context Protocol (MCP).

```
npx -y @msfeldstein/mcp-test-servers <server>
```

## Available Servers

- `all-types`: Demonstrates various tool parameter types supported by MCP
- `bad-param`: Server with an intentionally malformed parameter name
- `big-response`: Server that returns large responses
- `broken-tool`: Server with intentionally broken tool
- `crash-on-startup`: Server that crashes on startup
- `combined`: Server with tools and resources
- `duplicate-names`: Server with duplicate names for resources
- `enum-param`: Tool has enum string parameter
- `env-check`: Checks for SHOULD_RUN environment variable being passed properly
- `env-echo`: Echoes the environment variables
- `image`: Tool returns an image of sonic the hedgehog
- `long-description`: Publicize a very long description configured via env var
- `long-running`: Server that sends progress notifications every 2 seconds for a 20-second task
- `many-resources`: Server with multiple resources
- `many-tools`: Server with 100 tools that each return 'ack'
- `math`: Server with basic math function tools (add, subtract, multiply, divide, power, sqrt, factorial)
- `named`: Server with configurable name via MCP_SERVER_NAME environment variable
- `number-param`: Tool with a number parameter
- `optional-param`: Tool has an optional param
- `pattern-param`: Tool has a parameter with a pattern match
- `ping`: A simple server that responds with 'pong'
- `resource`: Resource server implementation
- `roots-echo`: Server that demonstrates MCP roots functionality by echoing back the roots provided by the client
- `stderr`: Server that logs to stderr
- `stdout` Servert that illegally logs to stdout

# Remote Servers

```
# Streamable HTTP
npm run http-ping

# SSE
npm run sse-ping
```



================================================
FILE: package.json
================================================
{
  "name": "@msfeldstein/mcp-test-servers",
  "version": "1.1.57",
  "type": "module",
  "bin": {
    "mcp-test-servers": "./src/cli.js"
  },
  "scripts": {
    "oauth-ping": "node src/oauth-ping-server.js",
    "http-ping": "node src/http-ping-server.js",
    "sse-ping": "node src/sse-ping-server.js",
    "sse-notification-stream": "node src/sse-notification-stream.js",
    "bump-and-publish": "git commit -a -m 'publish' && npm version patch && git push && npm publish"
  },
  "keywords": [
    "mcp",
    "model-context-protocol"
  ],
  "author": "Michael Feldstein",
  "license": "ISC",
  "description": "A collection of MCP test servers including working servers (ping, resource, combined, env-echo) and test failure cases (broken-tool, crash-on-startup)",
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.10.1",
    "cors": "^2.8.5",
    "express": "^4.21.2"
  },
  "publishConfig": {
    "access": "public"
  }
}



================================================
FILE: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@modelcontextprotocol/sdk':
        specifier: ^1.10.1
        version: 1.10.2
      cors:
        specifier: ^2.8.5
        version: 2.8.5
      express:
        specifier: ^4.21.2
        version: 4.21.2

packages:

  '@modelcontextprotocol/sdk@1.10.2':
    resolution: {integrity: sha512-rb6AMp2DR4SN+kc6L1ta2NCpApyA9WYNx3CrTSZvGxq9wH71bRur+zRqPfg0vQ9mjywR7qZdX2RGHOPq3ss+tA==}
    engines: {node: '>=18'}

  accepts@1.3.8:
    resolution: {integrity: sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==}
    engines: {node: '>= 0.6'}

  accepts@2.0.0:
    resolution: {integrity: sha512-5cvg6CtKwfgdmVqY1WIiXKc3Q1bkRqGLi+2W/6ao+6Y7gu/RCwRuAhGEzh5B4KlszSuTLgZYuqFqo5bImjNKng==}
    engines: {node: '>= 0.6'}

  array-flatten@1.1.1:
    resolution: {integrity: sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==}

  body-parser@1.20.3:
    resolution: {integrity: sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==}
    engines: {node: '>= 0.8', npm: 1.2.8000 || >= 1.4.16}

  body-parser@2.2.0:
    resolution: {integrity: sha512-02qvAaxv8tp7fBa/mw1ga98OGm+eCbqzJOKoRt70sLmfEEi+jyBYVTDGfCL/k06/4EMk/z01gCe7HoCH/f2LTg==}
    engines: {node: '>=18'}

  bytes@3.1.2:
    resolution: {integrity: sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==}
    engines: {node: '>= 0.8'}

  call-bind-apply-helpers@1.0.2:
    resolution: {integrity: sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==}
    engines: {node: '>= 0.4'}

  call-bound@1.0.4:
    resolution: {integrity: sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==}
    engines: {node: '>= 0.4'}

  content-disposition@0.5.4:
    resolution: {integrity: sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==}
    engines: {node: '>= 0.6'}

  content-disposition@1.0.0:
    resolution: {integrity: sha512-Au9nRL8VNUut/XSzbQA38+M78dzP4D+eqg3gfJHMIHHYa3bg067xj1KxMUWj+VULbiZMowKngFFbKczUrNJ1mg==}
    engines: {node: '>= 0.6'}

  content-type@1.0.5:
    resolution: {integrity: sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==}
    engines: {node: '>= 0.6'}

  cookie-signature@1.0.6:
    resolution: {integrity: sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==}

  cookie-signature@1.2.2:
    resolution: {integrity: sha512-D76uU73ulSXrD1UXF4KE2TMxVVwhsnCgfAyTg9k8P6KGZjlXKrOLe4dJQKI3Bxi5wjesZoFXJWElNWBjPZMbhg==}
    engines: {node: '>=6.6.0'}

  cookie@0.7.1:
    resolution: {integrity: sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==}
    engines: {node: '>= 0.6'}

  cookie@0.7.2:
    resolution: {integrity: sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==}
    engines: {node: '>= 0.6'}

  cors@2.8.5:
    resolution: {integrity: sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==}
    engines: {node: '>= 0.10'}

  cross-spawn@7.0.6:
    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
    engines: {node: '>= 8'}

  debug@2.6.9:
    resolution: {integrity: sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.4.0:
    resolution: {integrity: sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  depd@2.0.0:
    resolution: {integrity: sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==}
    engines: {node: '>= 0.8'}

  destroy@1.2.0:
    resolution: {integrity: sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==}
    engines: {node: '>= 0.8', npm: 1.2.8000 || >= 1.4.16}

  dunder-proto@1.0.1:
    resolution: {integrity: sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==}
    engines: {node: '>= 0.4'}

  ee-first@1.1.1:
    resolution: {integrity: sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==}

  encodeurl@1.0.2:
    resolution: {integrity: sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==}
    engines: {node: '>= 0.8'}

  encodeurl@2.0.0:
    resolution: {integrity: sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==}
    engines: {node: '>= 0.8'}

  es-define-property@1.0.1:
    resolution: {integrity: sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-object-atoms@1.1.1:
    resolution: {integrity: sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==}
    engines: {node: '>= 0.4'}

  escape-html@1.0.3:
    resolution: {integrity: sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==}

  etag@1.8.1:
    resolution: {integrity: sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==}
    engines: {node: '>= 0.6'}

  eventsource-parser@3.0.1:
    resolution: {integrity: sha512-VARTJ9CYeuQYb0pZEPbzi740OWFgpHe7AYJ2WFZVnUDUQp5Dk2yJUgF36YsZ81cOyxT0QxmXD2EQpapAouzWVA==}
    engines: {node: '>=18.0.0'}

  eventsource@3.0.6:
    resolution: {integrity: sha512-l19WpE2m9hSuyP06+FbuUUf1G+R0SFLrtQfbRb9PRr+oimOfxQhgGCbVaXg5IvZyyTThJsxh6L/srkMiCeBPDA==}
    engines: {node: '>=18.0.0'}

  express-rate-limit@7.5.0:
    resolution: {integrity: sha512-eB5zbQh5h+VenMPM3fh+nw1YExi5nMr6HUCR62ELSP11huvxm/Uir1H1QEyTkk5QX6A58pX6NmaTMceKZ0Eodg==}
    engines: {node: '>= 16'}
    peerDependencies:
      express: ^4.11 || 5 || ^5.0.0-beta.1

  express@4.21.2:
    resolution: {integrity: sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==}
    engines: {node: '>= 0.10.0'}

  express@5.1.0:
    resolution: {integrity: sha512-DT9ck5YIRU+8GYzzU5kT3eHGA5iL+1Zd0EutOmTE9Dtk+Tvuzd23VBU+ec7HPNSTxXYO55gPV/hq4pSBJDjFpA==}
    engines: {node: '>= 18'}

  finalhandler@1.3.1:
    resolution: {integrity: sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==}
    engines: {node: '>= 0.8'}

  finalhandler@2.1.0:
    resolution: {integrity: sha512-/t88Ty3d5JWQbWYgaOGCCYfXRwV1+be02WqYYlL6h0lEiUAMPM8o8qKGO01YIkOHzka2up08wvgYD0mDiI+q3Q==}
    engines: {node: '>= 0.8'}

  forwarded@0.2.0:
    resolution: {integrity: sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==}
    engines: {node: '>= 0.6'}

  fresh@0.5.2:
    resolution: {integrity: sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==}
    engines: {node: '>= 0.6'}

  fresh@2.0.0:
    resolution: {integrity: sha512-Rx/WycZ60HOaqLKAi6cHRKKI7zxWbJ31MhntmtwMoaTeF7XFH9hhBp8vITaMidfljRQ6eYWCKkaTK+ykVJHP2A==}
    engines: {node: '>= 0.8'}

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  get-intrinsic@1.3.0:
    resolution: {integrity: sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==}
    engines: {node: '>= 0.4'}

  get-proto@1.0.1:
    resolution: {integrity: sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==}
    engines: {node: '>= 0.4'}

  gopd@1.2.0:
    resolution: {integrity: sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==}
    engines: {node: '>= 0.4'}

  has-symbols@1.1.0:
    resolution: {integrity: sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==}
    engines: {node: '>= 0.4'}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  http-errors@2.0.0:
    resolution: {integrity: sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==}
    engines: {node: '>= 0.8'}

  iconv-lite@0.4.24:
    resolution: {integrity: sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==}
    engines: {node: '>=0.10.0'}

  iconv-lite@0.6.3:
    resolution: {integrity: sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==}
    engines: {node: '>=0.10.0'}

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  ipaddr.js@1.9.1:
    resolution: {integrity: sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==}
    engines: {node: '>= 0.10'}

  is-promise@4.0.0:
    resolution: {integrity: sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  math-intrinsics@1.1.0:
    resolution: {integrity: sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==}
    engines: {node: '>= 0.4'}

  media-typer@0.3.0:
    resolution: {integrity: sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==}
    engines: {node: '>= 0.6'}

  media-typer@1.1.0:
    resolution: {integrity: sha512-aisnrDP4GNe06UcKFnV5bfMNPBUw4jsLGaWwWfnH3v02GnBuXX2MCVn5RbrWo0j3pczUilYblq7fQ7Nw2t5XKw==}
    engines: {node: '>= 0.8'}

  merge-descriptors@1.0.3:
    resolution: {integrity: sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==}

  merge-descriptors@2.0.0:
    resolution: {integrity: sha512-Snk314V5ayFLhp3fkUREub6WtjBfPdCPY1Ln8/8munuLuiYhsABgBVWsozAG+MWMbVEvcdcpbi9R7ww22l9Q3g==}
    engines: {node: '>=18'}

  methods@1.1.2:
    resolution: {integrity: sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==}
    engines: {node: '>= 0.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-db@1.54.0:
    resolution: {integrity: sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  mime-types@3.0.1:
    resolution: {integrity: sha512-xRc4oEhT6eaBpU1XF7AjpOFD+xQmXNB5OVKwp4tqCuBpHLS/ZbBDrc07mYTDqVMg6PfxUjjNp85O6Cd2Z/5HWA==}
    engines: {node: '>= 0.6'}

  mime@1.6.0:
    resolution: {integrity: sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==}
    engines: {node: '>=4'}
    hasBin: true

  ms@2.0.0:
    resolution: {integrity: sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  negotiator@0.6.3:
    resolution: {integrity: sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==}
    engines: {node: '>= 0.6'}

  negotiator@1.0.0:
    resolution: {integrity: sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==}
    engines: {node: '>= 0.6'}

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-inspect@1.13.4:
    resolution: {integrity: sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==}
    engines: {node: '>= 0.4'}

  on-finished@2.4.1:
    resolution: {integrity: sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==}
    engines: {node: '>= 0.8'}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  parseurl@1.3.3:
    resolution: {integrity: sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==}
    engines: {node: '>= 0.8'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-to-regexp@0.1.12:
    resolution: {integrity: sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==}

  path-to-regexp@8.2.0:
    resolution: {integrity: sha512-TdrF7fW9Rphjq4RjrW0Kp2AW0Ahwu9sRGTkS6bvDi0SCwZlEZYmcfDbEsTz8RVk0EHIS/Vd1bv3JhG+1xZuAyQ==}
    engines: {node: '>=16'}

  pkce-challenge@5.0.0:
    resolution: {integrity: sha512-ueGLflrrnvwB3xuo/uGob5pd5FN7l0MsLf0Z87o/UQmRtwjvfylfc9MurIxRAWywCYTgrvpXBcqjV4OfCYGCIQ==}
    engines: {node: '>=16.20.0'}

  proxy-addr@2.0.7:
    resolution: {integrity: sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==}
    engines: {node: '>= 0.10'}

  qs@6.13.0:
    resolution: {integrity: sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==}
    engines: {node: '>=0.6'}

  qs@6.14.0:
    resolution: {integrity: sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==}
    engines: {node: '>=0.6'}

  range-parser@1.2.1:
    resolution: {integrity: sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==}
    engines: {node: '>= 0.6'}

  raw-body@2.5.2:
    resolution: {integrity: sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==}
    engines: {node: '>= 0.8'}

  raw-body@3.0.0:
    resolution: {integrity: sha512-RmkhL8CAyCRPXCE28MMH0z2PNWQBNk2Q09ZdxM9IOOXwxwZbN+qbWaatPkdkWIKL2ZVDImrN/pK5HTRz2PcS4g==}
    engines: {node: '>= 0.8'}

  router@2.2.0:
    resolution: {integrity: sha512-nLTrUKm2UyiL7rlhapu/Zl45FwNgkZGaCpZbIHajDYgwlJCOzLSk+cIPAnsEqV955GjILJnKbdQC1nVPz+gAYQ==}
    engines: {node: '>= 18'}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  safer-buffer@2.1.2:
    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}

  send@0.19.0:
    resolution: {integrity: sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==}
    engines: {node: '>= 0.8.0'}

  send@1.2.0:
    resolution: {integrity: sha512-uaW0WwXKpL9blXE2o0bRhoL2EGXIrZxQ2ZQ4mgcfoBxdFmQold+qWsD2jLrfZ0trjKL6vOw0j//eAwcALFjKSw==}
    engines: {node: '>= 18'}

  serve-static@1.16.2:
    resolution: {integrity: sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==}
    engines: {node: '>= 0.8.0'}

  serve-static@2.2.0:
    resolution: {integrity: sha512-61g9pCh0Vnh7IutZjtLGGpTA355+OPn2TyDv/6ivP2h/AdAVX9azsoxmg2/M6nZeQZNYBEwIcsne1mJd9oQItQ==}
    engines: {node: '>= 18'}

  setprototypeof@1.2.0:
    resolution: {integrity: sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  side-channel-list@1.0.0:
    resolution: {integrity: sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==}
    engines: {node: '>= 0.4'}

  side-channel-map@1.0.1:
    resolution: {integrity: sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==}
    engines: {node: '>= 0.4'}

  side-channel-weakmap@1.0.2:
    resolution: {integrity: sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==}
    engines: {node: '>= 0.4'}

  side-channel@1.1.0:
    resolution: {integrity: sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==}
    engines: {node: '>= 0.4'}

  statuses@2.0.1:
    resolution: {integrity: sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==}
    engines: {node: '>= 0.8'}

  toidentifier@1.0.1:
    resolution: {integrity: sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==}
    engines: {node: '>=0.6'}

  type-is@1.6.18:
    resolution: {integrity: sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==}
    engines: {node: '>= 0.6'}

  type-is@2.0.1:
    resolution: {integrity: sha512-OZs6gsjF4vMp32qrCbiVSkrFmXtG/AZhY3t0iAMrMBiAZyV9oALtXO8hsrHbMXF9x6L3grlFuwW2oAz7cav+Gw==}
    engines: {node: '>= 0.6'}

  unpipe@1.0.0:
    resolution: {integrity: sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==}
    engines: {node: '>= 0.8'}

  utils-merge@1.0.1:
    resolution: {integrity: sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==}
    engines: {node: '>= 0.4.0'}

  vary@1.1.2:
    resolution: {integrity: sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==}
    engines: {node: '>= 0.8'}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  zod-to-json-schema@3.24.5:
    resolution: {integrity: sha512-/AuWwMP+YqiPbsJx5D6TfgRTc4kTLjsh5SOcd4bLsfUg2RcEXrFMJl1DGgdHy2aCfsIA/cr/1JM0xcB2GZji8g==}
    peerDependencies:
      zod: ^3.24.1

  zod@3.24.3:
    resolution: {integrity: sha512-HhY1oqzWCQWuUqvBFnsyrtZRhyPeR7SUGv+C4+MsisMuVfSPx8HpwWqH8tRahSlt6M3PiFAcoeFhZAqIXTxoSg==}

snapshots:

  '@modelcontextprotocol/sdk@1.10.2':
    dependencies:
      content-type: 1.0.5
      cors: 2.8.5
      cross-spawn: 7.0.6
      eventsource: 3.0.6
      express: 5.1.0
      express-rate-limit: 7.5.0(express@5.1.0)
      pkce-challenge: 5.0.0
      raw-body: 3.0.0
      zod: 3.24.3
      zod-to-json-schema: 3.24.5(zod@3.24.3)
    transitivePeerDependencies:
      - supports-color

  accepts@1.3.8:
    dependencies:
      mime-types: 2.1.35
      negotiator: 0.6.3

  accepts@2.0.0:
    dependencies:
      mime-types: 3.0.1
      negotiator: 1.0.0

  array-flatten@1.1.1: {}

  body-parser@1.20.3:
    dependencies:
      bytes: 3.1.2
      content-type: 1.0.5
      debug: 2.6.9
      depd: 2.0.0
      destroy: 1.2.0
      http-errors: 2.0.0
      iconv-lite: 0.4.24
      on-finished: 2.4.1
      qs: 6.13.0
      raw-body: 2.5.2
      type-is: 1.6.18
      unpipe: 1.0.0
    transitivePeerDependencies:
      - supports-color

  body-parser@2.2.0:
    dependencies:
      bytes: 3.1.2
      content-type: 1.0.5
      debug: 4.4.0
      http-errors: 2.0.0
      iconv-lite: 0.6.3
      on-finished: 2.4.1
      qs: 6.14.0
      raw-body: 3.0.0
      type-is: 2.0.1
    transitivePeerDependencies:
      - supports-color

  bytes@3.1.2: {}

  call-bind-apply-helpers@1.0.2:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2

  call-bound@1.0.4:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      get-intrinsic: 1.3.0

  content-disposition@0.5.4:
    dependencies:
      safe-buffer: 5.2.1

  content-disposition@1.0.0:
    dependencies:
      safe-buffer: 5.2.1

  content-type@1.0.5: {}

  cookie-signature@1.0.6: {}

  cookie-signature@1.2.2: {}

  cookie@0.7.1: {}

  cookie@0.7.2: {}

  cors@2.8.5:
    dependencies:
      object-assign: 4.1.1
      vary: 1.1.2

  cross-spawn@7.0.6:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  debug@2.6.9:
    dependencies:
      ms: 2.0.0

  debug@4.4.0:
    dependencies:
      ms: 2.1.3

  depd@2.0.0: {}

  destroy@1.2.0: {}

  dunder-proto@1.0.1:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-errors: 1.3.0
      gopd: 1.2.0

  ee-first@1.1.1: {}

  encodeurl@1.0.2: {}

  encodeurl@2.0.0: {}

  es-define-property@1.0.1: {}

  es-errors@1.3.0: {}

  es-object-atoms@1.1.1:
    dependencies:
      es-errors: 1.3.0

  escape-html@1.0.3: {}

  etag@1.8.1: {}

  eventsource-parser@3.0.1: {}

  eventsource@3.0.6:
    dependencies:
      eventsource-parser: 3.0.1

  express-rate-limit@7.5.0(express@5.1.0):
    dependencies:
      express: 5.1.0

  express@4.21.2:
    dependencies:
      accepts: 1.3.8
      array-flatten: 1.1.1
      body-parser: 1.20.3
      content-disposition: 0.5.4
      content-type: 1.0.5
      cookie: 0.7.1
      cookie-signature: 1.0.6
      debug: 2.6.9
      depd: 2.0.0
      encodeurl: 2.0.0
      escape-html: 1.0.3
      etag: 1.8.1
      finalhandler: 1.3.1
      fresh: 0.5.2
      http-errors: 2.0.0
      merge-descriptors: 1.0.3
      methods: 1.1.2
      on-finished: 2.4.1
      parseurl: 1.3.3
      path-to-regexp: 0.1.12
      proxy-addr: 2.0.7
      qs: 6.13.0
      range-parser: 1.2.1
      safe-buffer: 5.2.1
      send: 0.19.0
      serve-static: 1.16.2
      setprototypeof: 1.2.0
      statuses: 2.0.1
      type-is: 1.6.18
      utils-merge: 1.0.1
      vary: 1.1.2
    transitivePeerDependencies:
      - supports-color

  express@5.1.0:
    dependencies:
      accepts: 2.0.0
      body-parser: 2.2.0
      content-disposition: 1.0.0
      content-type: 1.0.5
      cookie: 0.7.2
      cookie-signature: 1.2.2
      debug: 4.4.0
      encodeurl: 2.0.0
      escape-html: 1.0.3
      etag: 1.8.1
      finalhandler: 2.1.0
      fresh: 2.0.0
      http-errors: 2.0.0
      merge-descriptors: 2.0.0
      mime-types: 3.0.1
      on-finished: 2.4.1
      once: 1.4.0
      parseurl: 1.3.3
      proxy-addr: 2.0.7
      qs: 6.14.0
      range-parser: 1.2.1
      router: 2.2.0
      send: 1.2.0
      serve-static: 2.2.0
      statuses: 2.0.1
      type-is: 2.0.1
      vary: 1.1.2
    transitivePeerDependencies:
      - supports-color

  finalhandler@1.3.1:
    dependencies:
      debug: 2.6.9
      encodeurl: 2.0.0
      escape-html: 1.0.3
      on-finished: 2.4.1
      parseurl: 1.3.3
      statuses: 2.0.1
      unpipe: 1.0.0
    transitivePeerDependencies:
      - supports-color

  finalhandler@2.1.0:
    dependencies:
      debug: 4.4.0
      encodeurl: 2.0.0
      escape-html: 1.0.3
      on-finished: 2.4.1
      parseurl: 1.3.3
      statuses: 2.0.1
    transitivePeerDependencies:
      - supports-color

  forwarded@0.2.0: {}

  fresh@0.5.2: {}

  fresh@2.0.0: {}

  function-bind@1.1.2: {}

  get-intrinsic@1.3.0:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      function-bind: 1.1.2
      get-proto: 1.0.1
      gopd: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      math-intrinsics: 1.1.0

  get-proto@1.0.1:
    dependencies:
      dunder-proto: 1.0.1
      es-object-atoms: 1.1.1

  gopd@1.2.0: {}

  has-symbols@1.1.0: {}

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  http-errors@2.0.0:
    dependencies:
      depd: 2.0.0
      inherits: 2.0.4
      setprototypeof: 1.2.0
      statuses: 2.0.1
      toidentifier: 1.0.1

  iconv-lite@0.4.24:
    dependencies:
      safer-buffer: 2.1.2

  iconv-lite@0.6.3:
    dependencies:
      safer-buffer: 2.1.2

  inherits@2.0.4: {}

  ipaddr.js@1.9.1: {}

  is-promise@4.0.0: {}

  isexe@2.0.0: {}

  math-intrinsics@1.1.0: {}

  media-typer@0.3.0: {}

  media-typer@1.1.0: {}

  merge-descriptors@1.0.3: {}

  merge-descriptors@2.0.0: {}

  methods@1.1.2: {}

  mime-db@1.52.0: {}

  mime-db@1.54.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  mime-types@3.0.1:
    dependencies:
      mime-db: 1.54.0

  mime@1.6.0: {}

  ms@2.0.0: {}

  ms@2.1.3: {}

  negotiator@0.6.3: {}

  negotiator@1.0.0: {}

  object-assign@4.1.1: {}

  object-inspect@1.13.4: {}

  on-finished@2.4.1:
    dependencies:
      ee-first: 1.1.1

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  parseurl@1.3.3: {}

  path-key@3.1.1: {}

  path-to-regexp@0.1.12: {}

  path-to-regexp@8.2.0: {}

  pkce-challenge@5.0.0: {}

  proxy-addr@2.0.7:
    dependencies:
      forwarded: 0.2.0
      ipaddr.js: 1.9.1

  qs@6.13.0:
    dependencies:
      side-channel: 1.1.0

  qs@6.14.0:
    dependencies:
      side-channel: 1.1.0

  range-parser@1.2.1: {}

  raw-body@2.5.2:
    dependencies:
      bytes: 3.1.2
      http-errors: 2.0.0
      iconv-lite: 0.4.24
      unpipe: 1.0.0

  raw-body@3.0.0:
    dependencies:
      bytes: 3.1.2
      http-errors: 2.0.0
      iconv-lite: 0.6.3
      unpipe: 1.0.0

  router@2.2.0:
    dependencies:
      debug: 4.4.0
      depd: 2.0.0
      is-promise: 4.0.0
      parseurl: 1.3.3
      path-to-regexp: 8.2.0
    transitivePeerDependencies:
      - supports-color

  safe-buffer@5.2.1: {}

  safer-buffer@2.1.2: {}

  send@0.19.0:
    dependencies:
      debug: 2.6.9
      depd: 2.0.0
      destroy: 1.2.0
      encodeurl: 1.0.2
      escape-html: 1.0.3
      etag: 1.8.1
      fresh: 0.5.2
      http-errors: 2.0.0
      mime: 1.6.0
      ms: 2.1.3
      on-finished: 2.4.1
      range-parser: 1.2.1
      statuses: 2.0.1
    transitivePeerDependencies:
      - supports-color

  send@1.2.0:
    dependencies:
      debug: 4.4.0
      encodeurl: 2.0.0
      escape-html: 1.0.3
      etag: 1.8.1
      fresh: 2.0.0
      http-errors: 2.0.0
      mime-types: 3.0.1
      ms: 2.1.3
      on-finished: 2.4.1
      range-parser: 1.2.1
      statuses: 2.0.1
    transitivePeerDependencies:
      - supports-color

  serve-static@1.16.2:
    dependencies:
      encodeurl: 2.0.0
      escape-html: 1.0.3
      parseurl: 1.3.3
      send: 0.19.0
    transitivePeerDependencies:
      - supports-color

  serve-static@2.2.0:
    dependencies:
      encodeurl: 2.0.0
      escape-html: 1.0.3
      parseurl: 1.3.3
      send: 1.2.0
    transitivePeerDependencies:
      - supports-color

  setprototypeof@1.2.0: {}

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  side-channel-list@1.0.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4

  side-channel-map@1.0.1:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      object-inspect: 1.13.4

  side-channel-weakmap@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      object-inspect: 1.13.4
      side-channel-map: 1.0.1

  side-channel@1.1.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4
      side-channel-list: 1.0.0
      side-channel-map: 1.0.1
      side-channel-weakmap: 1.0.2

  statuses@2.0.1: {}

  toidentifier@1.0.1: {}

  type-is@1.6.18:
    dependencies:
      media-typer: 0.3.0
      mime-types: 2.1.35

  type-is@2.0.1:
    dependencies:
      content-type: 1.0.5
      media-typer: 1.1.0
      mime-types: 3.0.1

  unpipe@1.0.0: {}

  utils-merge@1.0.1: {}

  vary@1.1.2: {}

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  wrappy@1.0.2: {}

  zod-to-json-schema@3.24.5(zod@3.24.3):
    dependencies:
      zod: 3.24.3

  zod@3.24.3: {}



================================================
FILE: .npmrc
================================================
engine-strict=true
prefer-pnpm=true
auto-install-peers=true
shamefully-hoist=true
strict-peer-dependencies=true
use-node-version=18
package-manager=pnpm@8.15.5
use-pnpm=true 


================================================
FILE: src/all-types-server.js
================================================
#!/usr/bin/env node

// Import required dependencies from the MCP SDK and Zod for schema validation
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

// Define a nested object schema that will be used as part of the main parameters
// This demonstrates how to handle complex nested data structures
const nestedObjectSchema = z.object({
  nestedString: z.string().describe("A nested string property"),
  nestedNumber: z.number().describe("A nested number property"),
  nestedBoolean: z.boolean().describe("A nested boolean property"),
});

// Define the main parameter schema using Zod
// This schema demonstrates all the supported parameter types in MCP:
// - Basic types (string, number, boolean)
// - Arrays
// - Nested objects
// - Enums
// - Optional parameters
const allTypesParamsSchema = z.object({
  requiredString: z.string().describe("A required string parameter"),
  requiredInteger: z.number().int().describe("A required integer parameter"),
  requiredNumber: z.number().describe("A required number (float/decimal) parameter"),
  requiredBoolean: z.boolean().describe("A required boolean parameter"),
  requiredStringArray: z.array(z.string()).describe("A required array of strings"),
  requiredNumberArray: z.array(z.number()).describe("A required array of numbers"),
  requiredObject: nestedObjectSchema.describe("A required object with nested properties"),
  requiredEnum: z.enum(["option1", "option2", "option3"]).describe("A required enum parameter"),
  optionalString: z.string().optional().describe("An optional string parameter"),
  optionalNumber: z.number().optional().describe("An optional number parameter"),
});

// Initialize the MCP server with metadata and tool capabilities
// The server is configured to expose a single tool that demonstrates all parameter types
const server = new McpServer(
  {
    name: "all-types-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        "all_types_tool": {
          description: "A tool demonstrating various supported parameter types",
          parameters: allTypesParamsSchema, // Use Zod schema directly for capabilities
        },
      },
    },
  }
);

// Register the tool implementation
// This handler simply echoes back the received parameters to demonstrate
// that they were correctly parsed according to the schema
server.tool(
  "all_types_tool",
  allTypesParamsSchema,
  async (params) => {
    // Simply return the received parameters to demonstrate they were parsed correctly
    return {
      content: [
        {
          type: "text",
          text: `Received parameters: ${JSON.stringify(params, null, 2)}`,
        },
      ],
    };
  }
);

// Start the server using stdio transport
// This allows the server to communicate with clients through standard input/output
await server.connect(new StdioServerTransport());



================================================
FILE: src/bad-param-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";
// Create a new MCP server with stdio transport
const server = new McpServer({
  name: "bad-param-server",
  version: "1.0.0",
  capabilities: {
    tools: {
      "bad-param": {
        description: "A simple tool that returns 'pong'",
        parameters: {
          type: "object",
          properties: {},
          required: [],
        },
      },
    },
  },
});

// Register the ping tool
server.tool(
  "bad-param",
  {
    ["bad%%^Param"]: z
      .string()
      .describe("The bad param name"),
  },
  async (params) => {
    return {
      content: [
        {
          type: "text",
          text: "pong",
        },
      ],
    };
  }
);

// Connect to the transport and start the server
await server.connect(new StdioServerTransport());

// This server implements basic ping and echo functionality with configurable response delays



================================================
FILE: src/big-response-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

/**
 * MCP server that can generate a random string of a specified length
 */
const server = new McpServer(
  {
    name: "big-response-server",
    version: "1.0.1",
    capabilities: {
      tools: {
        "generate_big_response": {
          description: "Generates a random string of specified length",
          parameters: {
            type: "object",
            properties: {
              stringLength: {
                type: "integer",
                description: "The length of the random string to generate"
              }
            },
            required: ['stringLength']
          }
        }
      }
    }
  }
);

/**
 * Generates a random string of a specified length
 * @param {number} length - The length of the random string to generate
 * @returns {string} The generated random string
 */
function generateRandomString(length) {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return result;
}

/**
 * Register the generate_big_response tool
 */
server.tool("generate_big_response", {
  stringLength: z.number().int().positive().describe("The length of the random string to generate")
}, async (params) => {
  const randomString = generateRandomString(params.stringLength);
  
  return {
    content: [{
      type: "text",
      text: `Generated random string of length ${params.stringLength}:\n${randomString}`
    }]
  };
});

await server.connect(new StdioServerTransport()); 


================================================
FILE: src/broken-tool-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "broken-tool-server",
    version: "1.0.0",
    capabilities: {
      tools: {}
    }
  }
);

// Register a tool that crashes when called
server.tool("crash", async (params) => {
  // Simulate a crash by throwing an error
  throw new Error("This tool is intentionally broken!");
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport());


================================================
FILE: src/cli.js
================================================
#!/usr/bin/env node

const serverType = process.argv[2];

if (!serverType) {
  console.error('Please specify a server type - ping, resource, combined, broken-tool, crash-on-startup, env-check, env-echo, many-resources, duplicate-names, image, big-response, date, time, many-tools, named, long-description, enum-param, number-param, all-types, pattern-param, stdout, math, long-running');
  console.error('Example: npx @msfeldstein/mcp-test-servers ping');
  process.exit(1);
}

switch (serverType) {
  case 'all-types':
    import('./all-types-server.js');
    break;
  case 'bad-param':
    import('./bad-param-server.js');
    break;
  case 'big-response':
    import('./big-response-server.js');
    break;
  case 'broken-tool':
    import('./broken-tool-server.js');
    break;
  case 'crash-on-startup':
    import('./crash-on-startup-server.js');
    break;
  case 'combined':
    import('./combined-server.js');
    break;
  case 'duplicate-names':
    import('./duplicate-names-server.js');
    break;
  case 'enum-param':
    import('./enum-param-server.js');
    break;
  case 'env-check':
    import('./env-check-server.js');
    break;
  case 'env-echo':
    import('./env-echo-server.js');
    break;
  case 'image':
    import('./image-server.js');
    break;
  case 'long-description':
    import('./long-description-server.js');
    break;
  case 'long-running':
    import('./long-running-server.js');
    break;
  case 'many-resources':
    import('./many-resources-server.js');
    break;
  case 'many-tools':
    import('./many-tools-server.js');
    break;
  case 'math':
    import('./math-server.js');
    break;
  case 'named':
    import('./named-server.js');
    break;
  case 'number-param':
    import('./number-param-server.js');
    break;
  case 'optional-param':
    import('./optional-param-server.js');
    break;
  case 'pattern-param':
    import('./pattern-param-server.js');
    break;
  case 'ping':
    import('./ping-server.js');
    break;
  case 'resource':
    import('./resource-server.js');
    break;
  case 'stderr':
    import('./stderr-server.js');
    break;
  case 'stdout':
    import('./stdout-server.js');
    break;
  case 'dynamic-tools':
    import('./dynamic-tools-server.js');
    break;
  case 'root-echo':
    import('./root-echo-server.js');
    break;
  default:
    console.error('Unknown server type:', serverType);
    process.exit(1);
} 


================================================
FILE: src/combined-server.js
================================================
#!/usr/bin/env node

/**
 * @fileoverview A combined MCP server implementation that provides a ping tool and a hello world resource.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

/**
 * @type {McpServer}
 * @description Creates a new MCP server instance with basic capabilities
 */
const server = new McpServer(
  {
    name: "combined-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        fizzbuzz: {
          description: "Generates a FIZZY sequence up to the specified number",
          parameters: {
            type: "object",
            properties: {
                  limit: {
                    type: "number",
                    description: "The upper limit for the FIZZY sequence"
              }
            },
            required: ["limit"]
          }
        }
      }
    }
  }
);

/**
 * @function
 * @name ping
 * @description A simple ping tool that responds with "pong"
 * @param {Object} params - The parameters passed to the tool (unused)
 * @returns {Promise<Object>} A promise that resolves to an object containing the response
 */
server.tool("ping", async (params) => {
  return {
    content: [{
      type: "text",
      text: "pong"
    }]
  };
});

/**
 * @function
 * @name fizzbuzz
 * @description Generates a FizzBuzz sequence up to the specified number
 * @param {Object} params - The parameters containing the upper limit
 * @returns {Promise<Object>} A promise that resolves to an object containing the FizzBuzz sequence
 */
server.tool("fizzbuzz", async (params) => {
  const limit = params.limit;
  const result = [];
  
  for (let i = 1; i <= limit; i++) {
    let output = "";
    if (i % 3 === 0) output += "Fizz";
    if (i % 5 === 0) output += "Buzz";
    result.push(output || i.toString());
  }

  return {
    content: [{
      type: "text",
      text: result.join("\n")
    }]
  };
});

/**
 * @description Registers a simple "Hello World" resource with the server
 * @type {Resource}
 */
server.resource(
  "Hello World Text",
  "test://hello.txt",
  {
    description: "A simple test file containing 'Hello, world'",
    mimeType: "text/plain"
  },
  async () => ({
    contents: [
      {
        uri: "test://hello.txt",
        mimeType: "text/plain",
        text: "Hello, world"
      }
    ]
  })
);

await server.connect(new StdioServerTransport()); 


================================================
FILE: src/crash-on-startup-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

// Immediately throw an error during module initialization
throw new Error("Server crashed during startup!");

// The code below will never be reached
const server = new McpServer(
  {
    name: "crash-on-startup-server",
    version: "1.0.0",
    capabilities: {
      tools: {}
    }
  }
);

await server.connect(new StdioServerTransport()); 


================================================
FILE: src/duplicate-names-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "duplicate-names-server",
    version: "1.0.0"
  }
);

// Create sets of resources with duplicate names
const duplicateNames = [
  "Common Resource",
  "Duplicate File",
  "Same Name Different Content"
];

duplicateNames.forEach((name, nameIndex) => {
  // Create 3 resources for each name
  for (let i = 1; i <= 3; i++) {
    server.resource(
      name,
      `test://duplicate${nameIndex + 1}_${i}.txt`,
      {
        description: `Resource ${i} of 3 with name "${name}"`,
        mimeType: "text/plain"
      },
      async () => ({
        contents: [
          {
            uri: `test://duplicate${nameIndex + 1}_${i}.txt`,
            mimeType: "text/plain",
            text: `This is version ${i} of the resource named "${name}". Each resource shares the same name but has unique content and URI.`
          }
        ]
      })
    );
  }
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport()); 


================================================
FILE: src/dynamic-tools-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

// Create a new MCP server with stdio transport
const server = new McpServer(
    {
        name: "dynamic-tools-server",
        version: "1.0.0",
        capabilities: {
            tools: {
                "enableTools": {
                    description: "Enable the optional tool",
                    parameters: {
                        type: "object",
                        properties: {},
                        required: []
                    }
                }
            }
        }
    }
);

// Register the optional tool dynamically
const optionalTool = server.tool("optionalTool", {
    message: z.string().optional().describe("Optional message to include with hello")
}, async (params) => {
    const message = params?.message ? ` ${params.message}` : "";
    return {
        content: [{
            type: "text",
            text: `hello${message}`
        }]
    };
});
optionalTool.disable();

// Register the enableTools tool - this is always available
server.tool("toggleTool", async (params) => {
    if (optionalTool.enabled) {
        optionalTool.disable()
    } else {
        optionalTool.enable();
    }

    return {
        content: [{
            type: "text",
            text: `Success! The 'optionalTool' has been ${optionalTool.enabled ? "enabled" : "disabled"}.`
        }]
    };
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport());

// This server demonstrates dynamic tool management where tools can be enabled at runtime 


================================================
FILE: src/enum-param-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

// Create a new MCP server with stdio transport and a tool for searching Stripe documentation
const server = new McpServer(
  {
    name: "enum-param-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        "search_documentation": {
          description: "Search the Stripe documentation for the given question and language.\n\n    It takes two arguments:\n      ...",
          parameters: {
            type: "object",
            properties: {
              question: {
                type: "string",
                description: "The user question about integrating with Stripe will be used to search the documentation."
              },
              language: {
                type: "string",
                enum: ["dotnet", "go", "java", "node", "php", "ruby", "python", "curl"],
                description: "The programming language to search for in the the documentation."
              }
            },
            required: ["question"]
          }
        }
      }
    }
  }
);

// Register the search_documentation tool with a zod enum schema
server.tool(
  "search_documentation",
  {
    question: z.string().describe("The user question about integrating with Stripe will be used to search the documentation."),
    language: z.enum(["dotnet", "go", "java", "node", "php", "ruby", "python", "curl"]).describe("The programming language to search for in the the documentation.")
  },
  async (params) => {
    return {
      content: [
        {
          type: "text",
          text: `Question: ${params.question}` + (params.language ? `, Language: ${params.language}` : "")
        }
      ]
    };
  }
);

// Connect to the transport and start the server
await server.connect(new StdioServerTransport());

// This server demonstrates a search_documentation tool with enum type parameter. 


================================================
FILE: src/env-check-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

// Check environment variable before proceeding
if (process.env.SHOULD_RUN !== "true") {
  throw new Error("SHOULD_RUN environment variable must be set to 'true' to start this server");
}

// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "env-check-server",
    version: "1.0.0",
    capabilities: {
      tools: {}
    }
  }
);

// Register a simple tool to show the server is running
server.tool("status", async (params) => {
  return {
    content: [{
      type: "text",
      text: "Server is running with SHOULD_RUN=true"
    }]
  };
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport()); 


================================================
FILE: src/env-echo-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "env-echo-server",
    version: "1.0.0",
    capabilities: {
      tools: {}
    }
  }
);

// Register a tool that returns all environment variables
server.tool("env_echo", async (params) => {
  // Convert process.env object to a formatted string
  const envString = Object.entries(process.env)
    .map(([key, value]) => `${key}=${value}`)
    .join('\n');

  return {
    content: [{
      type: "text",
      text: `Current environment variables:\n${envString}`
    }]
  };
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport()); 


================================================
FILE: src/file-ops-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import fs from 'fs/promises';
import path from 'path';

const server = new McpServer(
  {
    name: "file-ops-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        readFile: {
          description: "Read contents of a file",
          parameters: {
            type: "object",
            properties: {
              filePath: {
                type: "string",
                description: "Path to the file to read"
              }
            },
            required: ["filePath"]
          },
          async handler(params) {
            try {
              const content = await fs.readFile(params.filePath, 'utf-8');
              return { content };
            } catch (error) {
              throw new Error(`Failed to read file: ${error.message}`);
            }
          }
        },
        writeFile: {
          description: "Write content to a file",
          parameters: {
            type: "object",
            properties: {
              filePath: {
                type: "string",
                description: "Path to write the file to"
              },
              content: {
                type: "string",
                description: "Content to write to the file"
              }
            },
            required: ["filePath", "content"]
          },
          async handler(params) {
            try {
              await fs.writeFile(params.filePath, params.content, 'utf-8');
              return { success: true };
            } catch (error) {
              throw new Error(`Failed to write file: ${error.message}`);
            }
          }
        },
        listDirectory: {
          description: "List contents of a directory",
          parameters: {
            type: "object",
            properties: {
              dirPath: {
                type: "string",
                description: "Path to the directory to list"
              }
            },
            required: ["dirPath"]
          },
          async handler(params) {
            try {
              const files = await fs.readdir(params.dirPath);
              const fileStats = await Promise.all(
                files.map(async (file) => {
                  const filePath = path.join(params.dirPath, file);
                  const stats = await fs.stat(filePath);
                  return {
                    name: file,
                    isDirectory: stats.isDirectory(),
                    size: stats.size,
                    modified: stats.mtime
                  };
                })
              );
              return { files: fileStats };
            } catch (error) {
              throw new Error(`Failed to list directory: ${error.message}`);
            }
          }
        }
      }
    }
  }
);

await server.connect(new StdioServerTransport()); 


================================================
FILE: src/headers-server.py
================================================
from fastmcp import FastMCP
from fastmcp.server.dependencies import get_http_headers

mcp = FastMCP(name="Headers Demo")

@mcp.tool()
async def safe_header_info() -> dict:
    """Safely get header information without raising errors."""
    # Get headers (returns empty dict if no request context)
    headers = get_http_headers()
    
    # Get authorization header
    auth_header = headers.get("authorization", "")
    is_bearer = auth_header.startswith("Bearer ")
    
    return {
        "user_agent": headers.get("user-agent", "Unknown"),
        "content_type": headers.get("content-type", "Unknown"),
        "has_auth": bool(auth_header),
        "auth_type": "Bearer" if is_bearer else "Other" if auth_header else "None",
        "headers_count": len(headers),
        "all_headers": dict(headers)  # Return all headers
    }


================================================
FILE: src/http-ping-server.js
================================================
#!/usr/bin/env node

import express from "express";
import cors from "cors";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StreamableHTTPServerTransport } from "@modelcontextprotocol/sdk/server/streamableHttp.js";
import { isInitializeRequest } from "@modelcontextprotocol/sdk/types.js";
import { InMemoryEventStore } from "@modelcontextprotocol/sdk/examples/shared/inMemoryEventStore.js";

// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "ping-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        "ping": {
          description: "A simple tool that returns 'pong'",
          parameters: {
            type: "object",
            properties: {},
            required: []
          }
        },
      }
    }
  }
);

// Register the ping tool
server.tool("ping", async (params) => {
  console.log("Ping tool called with headers:", params.headers, params);
  return {
    content: [{
      type: "text",
      text: "pong"
    }]
  };
});

const app = express();
app.use(express.json());

const transport = new StreamableHTTPServerTransport({
  sessionIdGenerator: undefined, // set to undefined for stateless servers
});

// Setup routes for the server
const setupServer = async () => {
  await server.connect(transport);
};

app.post('/mcp', async (req, res) => {
  console.log('Received MCP request:', req.body);
  console.log('User-Agent:', req.get("User-Agent"));
  try {
      await transport.handleRequest(req, res, req.body);
  } catch (error) {
    console.error('Error handling MCP request:', error);
    if (!res.headersSent) {
      res.status(500).json({
        jsonrpc: '2.0',
        error: {
          code: -32603,
          message: 'Internal server error',
        },
        id: null,
      });
    }
  }
});

app.get('/mcp', async (req, res) => {
  console.log('Received GET MCP request');
  console.log('User-Agent:', req.get("User-Agent"));
  res.writeHead(405).end(JSON.stringify({
    jsonrpc: "2.0",
    error: {
      code: -32000,
      message: "Method not allowed."
    },
    id: null
  }));
});

app.delete('/mcp', async (req, res) => {
  console.log('Received DELETE MCP request');
  console.log('User-Agent:', req.get("User-Agent"));
  res.writeHead(405).end(JSON.stringify({
    jsonrpc: "2.0",
    error: {
      code: -32000,
      message: "Method not allowed."
    },
    id: null
  }));
});

// Start the server
const PORT = 3001;
setupServer().then(() => {
  app.listen(PORT, () => {
    console.log(`MCP Streamable HTTP Server listening at http://localhost:${PORT}/mcp`);
  });
}).catch(error => {
  console.error('Failed to set up the server:', error);
  process.exit(1);
});


================================================
FILE: src/image-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

// Create a new MCP server with stdio transport
const server = new McpServer({
  name: "image-server",
  version: "1.0.0",
  capabilities: {
    tools: {
      generate_image: {
        description: "A tool that returns a red circle image",
        parameters: {
          type: "object",
          properties: {},
          required: [],
        },
      },
    },
  },
});
 
// Replace this placeholder with your actual base64 encoded red circle image
const RED_CIRCLE_BASE64 =
""


// Register the generate_image tool
server.tool("generate_image", async (params) => {
  return {
    content: [
      {
        type: "image",
        data: RED_CIRCLE_BASE64,
        mimeType: "image/jpeg",
      },
    ],
  };
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport());



================================================
FILE: src/long-description-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

// Get description tokens from environment variable or use default
const descriptionTokens = process.env.DESCRIPTION_TOKENS;
const descriptionChars = process.env.DESCRIPTION_CHARS;

const baseDescription = "this is a 10 token description to repeat. ";

let description;
if (descriptionTokens) {
  description = baseDescription.repeat(Math.ceil(parseInt(descriptionTokens, 10) / 10));
} else {
  const numChars = parseInt(descriptionChars ?? "2000", 10);
  description = baseDescription.repeat(Math.ceil(numChars / baseDescription.length) + 1).slice(0, numChars);
}

// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "long-description-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        "get-info": {
          description,
          parameters: {
            type: "object",
            properties: {},
            required: []
          }
        }
      }
    }
  }
);

// Register the get-info tool
server.tool("get-info", description, async (params) => {
  return {
    content: [{
      type: "text",
      text: "Server information retrieved successfully"
    }]
  };
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport()); 


================================================
FILE: src/long-running-server.js
================================================
#!/usr/bin/env node

import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from "@modelcontextprotocol/sdk/types.js";

const server = new Server(
  {
    name: "example-servers/everything",
    version: "1.0.0",
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

const LongRunningOperationSchema = z.object({
  duration: z
    .number()
    .default(10)
    .describe("Duration of the operation in seconds"),
  steps: z.number().default(5).describe("Number of steps in the operation"),
});

const LongRunningOperationWithNoTotalSchema = z.object({
  duration: z
    .number()
    .default(10)
    .describe("Duration of the operation in seconds"),
  steps: z.number().default(5).describe("Number of steps in the operation"),
});


const LongRunningOperationJSONSchema = {
  "type": "object",
  "properties": {
    "duration": {
      "type": "number",
      "description": "Duration of the operation in seconds",
      "default": 10
    },
    "steps": {
      "type": "number",
      "description": "Number of steps in the operation",
      "default": 5
    }
  },
  "required": []
}

const LongRunningOperationWithNoTotalJSONSchema = {
  "type": "object",
  "properties": {
    "duration": {
      "type": "number",
      "description": "Duration of the operation in seconds",
      "default": 10
    },
    "steps": {
      "type": "number",
      "description": "Number of steps in the operation",
      "default": 5
    }
  },
  "required": []
}

server.setRequestHandler(ListToolsRequestSchema, async () => {
  const tools = [
    {
      name: "long-running-task",
      description:
        "Demonstrates a long running operation with progress updates",
      inputSchema: LongRunningOperationJSONSchema
    },
    {
      name: "long-running-task-with-no-total",
      description:
        "Demonstrates a long running operation with progress updates",
      inputSchema: LongRunningOperationWithNoTotalJSONSchema
    }
  ];

  return { tools };
});

server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  if (name === "long-running-task") {
    const validatedArgs = LongRunningOperationSchema.parse(args);
    const { duration, steps } = validatedArgs;
    const stepDuration = duration / steps;
    const progressToken = request.params._meta?.progressToken;

    for (let i = 0; i < steps + 1; i++) {
      if (progressToken !== undefined) {
        await server.notification({
          method: "notifications/progress",
          params: {
            progress: i,
            total: steps,
            progressToken,
          },
        });
      }
      await new Promise((resolve) =>
        setTimeout(resolve, stepDuration * 1000)
      );
    }

    return {
      content: [
        {
          type: "text",
          text: `Long running operation completed. Duration: ${duration} seconds, Steps: ${steps}.`,
        },
      ],
    };
  }

  if (name === "long-running-task-with-no-total") {
    const validatedArgs = LongRunningOperationWithNoTotalSchema.parse(args);
    const { duration, steps } = validatedArgs;
    const stepDuration = duration / steps;
    const progressToken = request.params._meta?.progressToken;

    for (let i = 0; i < steps + 1; i++) {
      if (progressToken !== undefined) {
        await server.notification({
          method: "notifications/progress",
          params: {
            progress: i,
            progressToken,
          },
        });
      }
      await new Promise((resolve) =>
        setTimeout(resolve, stepDuration * 1000)
      );
    }

    return {
      content: [
        {
          type: "text",
          text: `Long running operation completed. Duration: ${duration} seconds, Steps: ${steps}.`,
        },
      ],
    };
  }
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport());

// This server implements a long-running task with progress notifications 


================================================
FILE: src/many-resources-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "many-resources-server",
    version: "1.0.0"
  }
);

// Generate 200 resources
for (let i = 1; i <= 600; i++) {
  server.resource(
    `Resource ${i}`,
    `test://resource${i}.txt`,
    {
      description: `Resource number ${i} of 200`,
      mimeType: "text/plain"
    },
    async () => ({
      contents: [
        {
          uri: `test://resource${i}.txt`,
          mimeType: "text/plain",
          text: `This is the content of resource ${i} of 200. Each resource has unique content.`
        }
      ]
    })
  );
}

// Connect to the transport and start the server
await server.connect(new StdioServerTransport()); 


================================================
FILE: src/many-tools-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "many-tools-server",
    version: "1.0.0",
    capabilities: {
      tools: Object.fromEntries(
        Array.from({ length: 100 }, (_, i) => [
          `tool_${i + 1}`,
          {
            description: `Tool ${i + 1} that returns 'ack'`,
            parameters: {
              type: "object",
              properties: {},
              required: []
            }
          }
        ])
      )
    }
  }
);

// Register all 100 tools
for (let i = 1; i <= 100; i++) {
  server.tool(`tool_${i}`, async () => {
    return {
      content: [{
        type: "text",
        text: "ack"
      }]
    };
  });
}

// Connect to the transport and start the server
await server.connect(new StdioServerTransport()); 


================================================
FILE: src/math-server.js
================================================
#!/usr/bin/env node

// Import required dependencies from the MCP SDK and zod validation library
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

/**
 * Math Server
 * This server implements basic mathematical operations as MCP tools.
 * It uses stdio for communication and provides functions like:
 * - Basic arithmetic (add, subtract, multiply, divide)
 * - Advanced operations (power, square root, factorial)
 */

// Initialize the MCP server with configuration and tool definitions
const server = new McpServer(
  {
    name: "math-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        "add": {
          description: "Add two numbers",
          parameters: {
            type: "object",
            properties: {
              a: { type: "number", description: "First number" },
              b: { type: "number", description: "Second number" }
            },
            required: ["a", "b"]
          }
        },
        "subtract": {
          description: "Subtract b from a",
          parameters: {
            type: "object",
            properties: {
              a: { type: "number", description: "Number to subtract from" },
              b: { type: "number", description: "Number to subtract" }
            },
            required: ["a", "b"]
          }
        },
        "multiply": {
          description: "Multiply two numbers",
          parameters: {
            type: "object",
            properties: {
              a: { type: "number", description: "First number" },
              b: { type: "number", description: "Second number" }
            },
            required: ["a", "b"]
          }
        },
        "divide": {
          description: "Divide a by b",
          parameters: {
            type: "object",
            properties: {
              a: { type: "number", description: "Dividend" },
              b: { type: "number", description: "Divisor (cannot be zero)" }
            },
            required: ["a", "b"]
          }
        },
        "power": {
          description: "Calculate a raised to the power of b",
          parameters: {
            type: "object",
            properties: {
              a: { type: "number", description: "Base number" },
              b: { type: "number", description: "Exponent" }
            },
            required: ["a", "b"]
          }
        },
        "sqrt": {
          description: "Calculate the square root of a number",
          parameters: {
            type: "object",
            properties: {
              n: { type: "number", description: "Number to find square root of (must be non-negative)" }
            },
            required: ["n"]
          }
        },
        "factorial": {
          description: "Calculate the factorial of a non-negative integer",
          parameters: {
            type: "object",
            properties: {
              n: { type: "number", description: "Non-negative integer to calculate factorial of" }
            },
            required: ["n"]
          }
        }
      }
    }
  }
);

// Tool Implementations
// Each tool follows the pattern of:
// 1. Parameter validation using zod
// 2. Computation of the mathematical operation
// 3. Returning formatted results

// Addition: Adds two numbers and returns the result
server.tool("add", {
  a: z.number().describe("First number"),
  b: z.number().describe("Second number")
}, async (params) => {
  const result = params.a + params.b;
  return {
    content: [{
      type: "text",
      text: `${params.a} + ${params.b} = ${result}`
    }]
  };
});

// Subtraction: Subtracts the second number from the first
server.tool("subtract", {
  a: z.number().describe("Number to subtract from"),
  b: z.number().describe("Number to subtract")
}, async (params) => {
  const result = params.a - params.b;
  return {
    content: [{
      type: "text",
      text: `${params.a} - ${params.b} = ${result}`
    }]
  };
});

// Multiplication: Multiplies two numbers together
server.tool("multiply", {
  a: z.number().describe("First number"),
  b: z.number().describe("Second number")
}, async (params) => {
  const result = params.a * params.b;
  return {
    content: [{
      type: "text",
      text: `${params.a} × ${params.b} = ${result}`
    }]
  };
});

// Division: Divides first number by second, includes zero check
server.tool("divide", {
  a: z.number().describe("Dividend"),
  b: z.number().describe("Divisor (cannot be zero)")
}, async (params) => {
  if (params.b === 0) {
    return {
      content: [{
        type: "text",
        text: "Error: Division by zero is not allowed"
      }]
    };
  }
  const result = params.a / params.b;
  return {
    content: [{
      type: "text",
      text: `${params.a} ÷ ${params.b} = ${result}`
    }]
  };
});

// Power: Calculates exponentiation (a raised to power b)
server.tool("power", {
  a: z.number().describe("Base number"),
  b: z.number().describe("Exponent")
}, async (params) => {
  const result = Math.pow(params.a, params.b);
  return {
    content: [{
      type: "text",
      text: `${params.a}^${params.b} = ${result}`
    }]
  };
});

// Square Root: Calculates the square root, validates for non-negative input
server.tool("sqrt", {
  n: z.number().describe("Number to find square root of (must be non-negative)")
}, async (params) => {
  if (params.n < 0) {
    return {
      content: [{
        type: "text",
        text: "Error: Cannot calculate square root of a negative number"
      }]
    };
  }
  const result = Math.sqrt(params.n);
  return {
    content: [{
      type: "text",
      text: `√${params.n} = ${result}`
    }]
  };
});

/**
 * Factorial Calculator
 * Computes n! (n factorial) for non-negative integers
 * Includes validation for:
 * - Non-negative integers only
 * - Upper limit check to prevent overflow
 */
server.tool("factorial", {
  n: z.number().int().min(0).describe("Non-negative integer to calculate factorial of")
}, async (params) => {
  if (params.n > 170) {
    return {
      content: [{
        type: "text",
        text: "Error: Factorial result would be too large (exceeds Number.MAX_VALUE)"
      }]
    };
  }
  
  let result = 1;
  for (let i = 2; i <= params.n; i++) {
    result *= i;
  }
  
  return {
    content: [{
      type: "text",
      text: `${params.n}! = ${result}`
    }]
  };
});

// Initialize the server with stdio transport
// This allows the server to communicate via standard input/output
await server.connect(new StdioServerTransport());

// This server implements basic math functionality 


================================================
FILE: src/named-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

// Get the server name from environment variable, default to 'unnamed-server' if not set
const serverName = process.env.MCP_SERVER_NAME || 'unnamed-server';

// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: serverName,
    version: "1.0.0",
    capabilities: {
      tools: {}
    }
  }
);

// Register a tool that returns the server's name, using the server name in the tool name
server.tool(serverName, async () => {
  return {
    content: [{
      type: "text",
      text: `This server's name is: ${serverName}`
    }]
  };
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport()); 


================================================
FILE: src/number-param-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "number-param-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        "number-param": {
          description: "A tool that accepts a number parameter and returns its square",
          parameters: {
            type: "object",
            properties: {
              number: {
                type: "number",
                description: "The number to process"
              }
            },
            required: ["number"]
          }
        }
      }
    }
  }
);

// Register the number-param tool
server.tool("number-param", {
  number: z.number().describe("The number to process")
}, async (params) => {
  const result = params.number * params.number;
  return {
    content: [{
      type: "text",
      text: `The square of ${params.number} is ${result}`
    }]
  };
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport()); 


================================================
FILE: src/oauth-ping-server.js
================================================
import {
  McpServer,
  mcpExpressMiddleware,
  ProxyOAuthServerProvider,
  mcpAuthRouter,
} from "@modelcontextprotocol/sdk";
import express from "express";

const PORT = process.env.PORT || 3000;
const BASE_URL = process.env.BASE_URL || `http://localhost:${PORT}`;
const AUTH_EXTERNAL_BASE_URL = "https://auth.external.com"; // Replace with your actual auth provider base URL
const AUTH_EXTERNAL_AUTHORIZE_URL = `${AUTH_EXTERNAL_BASE_URL}/oauth2/v1/authorize`;
const AUTH_EXTERNAL_TOKEN_URL = `${AUTH_EXTERNAL_BASE_URL}/oauth2/v1/token`;
const AUTH_EXTERNAL_REVOKE_URL = `${AUTH_EXTERNAL_BASE_URL}/oauth2/v1/revoke`;
const YOUR_CLIENT_ID = "YOUR_CLIENT_ID"; // Replace with actual client ID
const YOUR_CLIENT_SECRET = "YOUR_CLIENT_SECRET"; // Replace with actual client secret, if needed by provider
const SERVICE_DOCUMENTATION_URL = "https://docs.example.com/"; // Replace with your service docs URL

const app = express();

// Configure the OAuth Proxy Provider
const proxyProvider = new ProxyOAuthServerProvider({
  endpoints: {
    authorizationUrl: AUTH_EXTERNAL_AUTHORIZE_URL,
    tokenUrl: AUTH_EXTERNAL_TOKEN_URL,
    revocationUrl: AUTH_EXTERNAL_REVOKE_URL,
  },
  // Basic token verification - replace with actual verification logic
  verifyAccessToken: async (token) => {
    console.log("Verifying access token:", token);
    // --- Add your real token verification logic here --- 
    // Example: Call your provider's userinfo endpoint or validate JWT signature
    // This is a placeholder and insecure for production
    return {
      token,
      clientId: YOUR_CLIENT_ID, // This might come from the token introspection result
      scopes: ["ping_scope"], // This should ideally come from the token
    };
  },
  // Client verification - replace with actual lookup if needed
  getClient: async (client_id) => {
    console.log("Getting client info for:", client_id);
    // --- Add your real client lookup/verification logic here --- 
    // This might involve checking a database of registered clients
    if (client_id === YOUR_CLIENT_ID) {
      return {
        client_id,
        // Ensure this redirect URI matches what's configured in your MCP client and OAuth provider
        redirect_uris: [`${BASE_URL}/callback`], 
        // Add other client properties if needed (e.g., client_secret for token endpoint auth)
        client_secret: YOUR_CLIENT_SECRET, // Include if your provider requires it for token exchange
      };
    }
    return null; // Indicate client not found/invalid
  },
});

// Set up MCP Auth routes
app.use(
  mcpAuthRouter({
    provider: proxyProvider,
    issuerUrl: new URL(AUTH_EXTERNAL_BASE_URL), // Issuer ID for discovery
    baseUrl: new URL(BASE_URL), // Base URL where this server is hosted
    serviceDocumentationUrl: new URL(SERVICE_DOCUMENTATION_URL),
  })
);

// Configure the MCP Server itself
const server = new McpServer({
  // transportOptions removed - handled by express middleware
  serverInfo: {
    name: "oauth-ping-server",
    version: "1.0.0",
    // Define the authentication strategy using the configured proxy
    authenticationStrategies: [
      {
        id: "oauth2-proxy-example", // Must match provider ID if only one
        type: "oauth2",
        title: "Example OAuth2 (Proxy)",
        authorizationUrl: `${BASE_URL}/authorize`, // Use the local proxy endpoint
        tokenUrl: `${BASE_URL}/token`, // Use the local proxy endpoint
        // clientId is often handled by the interaction with the proxy
        clientId: YOUR_CLIENT_ID, 
        scopes: ["ping_scope"],
        pkce: true, // PKCE is handled by the SDK/proxy router
      },
    ],
    // You can also include discovery document URL
    wellKnownUrl: `${BASE_URL}/.well-known/mcp-configuration`, 
  },
  loggerOptions: {
    level: "debug",
  },
});

// Define the simple ping tool
server.registerTool({
  toolName: "ping",
  description: "A simple ping tool that requires authentication.",
  // Add authentication requirement
  authentication: {
    strategies: ["oauth2-proxy-example"], // Reference the strategy ID
    // Optional: specify required scopes
    // scopes: ["ping_scope"],
  },
  run: async (params, context) => {
    // Access authentication details from context
    const authContext = context?.authentication?.find(auth => auth.strategyId === 'oauth2-proxy-example');
    if (authContext && authContext.type === 'oauth2') {
      console.log("Ping tool executed with access token:", authContext.accessToken);
      // You can use the accessToken to make authenticated calls to backend services
    } else {
      console.warn("Ping tool executed without expected authentication context.");
    }
    console.log("Ping tool executed successfully (OAuth authenticated).");
    return { pong: true };
  },
});

// Add MCP middleware to handle MCP requests (e.g., tool calls)
// Ensure this comes *after* the auth router if auth is required for tools
app.use(mcpExpressMiddleware(server));

// Start the Express server
app.listen(PORT, () => {
  console.log(`OAuth Ping MCP Server listening on port ${PORT}`);
  console.log(`Base URL: ${BASE_URL}`);
  console.log(`MCP Configuration: ${BASE_URL}/.well-known/mcp-configuration`);
  console.log(`OAuth Authorize Endpoint: ${BASE_URL}/authorize`);
  console.log(`OAuth Token Endpoint: ${BASE_URL}/token`);
}); 


================================================
FILE: src/optional-param-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";
// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "optional-param-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        "ping": {
          description: "A simple tool with an optional message",
          parameters: {
            type: "object",
            properties: {
              text: {
                type: "string",
                description: "The text to echo",
                optional: true
              }
            },
            required: []
          }
        },
      }
    }
  }
);

server.tool("echo", {
  text: z.string().describe("The text to echo").optional()
}, async (params) => {
  // Return pong after waiting
  return {
    content: [{
      type: "text",
      text: `User said: ${params.text}` || "No message sent"
    }]
  };
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport()); 

// This server implements basic ping and echo functionality with configurable response delays


================================================
FILE: src/pattern-param-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

// Define the Zod schema based on the JSON schema
const BugsnagUrlParamsSchema = z.object({
  error_url: z.string().url().regex(
    /^https:\/\/app\.bugsnag\.com\/([^/]+)\/([^/]+)\/errors\/([^/]+)/,
    "URL must match the pattern https://app.bugsnag.com/{org}/{project}/errors/{error_id}"
  ).describe("a URL in the form https://app.bugsnag.com/{org}/{project}/errors/{error_id}")
});

// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "pattern-param-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        "parse_bugsnag_error_url": {
          description: "This tool will take a URL of an error in Bugsnag, and will parse out the organization slug, project slug, and error ID. Returns fields for org_slug, project_slug, and error_id",
          parameters: {
            type: "object",
            properties: {
              error_url: {
                type: "string",
                pattern: "^https:.*",
                description: "a URL in the form https://app.bugsnag.com/{org}/{project}/errors/{error_id}"
              }
            },
            required: ["error_url"]
          }
        }
      }
    }
  }
);

// Register the parse_bugsnag_error_url tool with a parameter shape, not a full Zod object
server.tool("parse_bugsnag_error_url", {
  error_url: z.string().regex(
    /^https:\/\/app\.bugsnag\.com\/([^/]+)\/([^/]+)\/errors\/([^/]+)/,
    "URL must match the pattern https://app.bugsnag.com/{org}/{project}/errors/{error_id}"
  ).describe("a URL in the form https://app.bugsnag.com/{org}/{project}/errors/{error_id}")
}, async (params) => {
  const url = params.error_url;
  const match = url.match(/^https:\/\/app\.bugsnag\.com\/([^/]+)\/([^/]+)\/errors\/([^/]+)/);

  if (!match) {
    // This should ideally be caught by Zod validation, but double-check
    throw new Error("Invalid Bugsnag URL format.");
  }

  const [, org_slug, project_slug, error_id] = match;

  return {
    content: [{
      type: "json",
      json: {
        org_slug,
        project_slug,
        error_id
      }
    }]
  };
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport());



================================================
FILE: src/ping-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";
// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "ping-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        "ping": {
          description: "A simple tool that returns 'pong'",
          parameters: {
            type: "object",
            properties: {},
            required: []
          }
        },
      }
    }
  }
);

// Register the ping tool
server.tool("ping", "A simple tool that returns 'pong'", async (params) => {
  return {
    content: [{
      type: "text",
      text: "pong"
    }]
  };
});

// Register the long-running-ping tool
server.tool("long-running-ping", {
  waitTimeMs: z.number().optional().default(3000).describe("The time to wait in milliseconds before returning the response")
}, async (params) => {
  // Get the wait duration in milliseconds (default to 3000ms if not provided)
  const waitTime = params?.waitTimeMs || 3000;
  
  // Create a promise that resolves after the specified time
  await new Promise(resolve => setTimeout(resolve, waitTime));
  
  // Return pong after waiting
  return {
    content: [{
      type: "text",
      text: "pong"
    }]
  };
});

server.tool("echo", {
  text: z.string().describe("The text to echo")
}, async (params) => {
  // Return pong after waiting
  return {
    content: [{
      type: "text",
      text: params.text
    }]
  };
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport()); 

// This server implements basic ping and echo functionality with configurable response delays


================================================
FILE: src/resource-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "resource-server",
    version: "1.0.0"
  }
);

// Register our test resource
server.resource(
  "Hello World Text",
  "test://hello.txt",
  {
    description: "A simple test file containing 'Hello, world'",
    mimeType: "text/plain"
  },
  async () => ({
    contents: [
      {
        uri: "test://hello.txt",
        mimeType: "text/plain",
        text: "Hello, world"
      }
    ]
  })
);

// Connect to the transport and start the server
await server.connect(new StdioServerTransport()); 


================================================
FILE: src/root-echo-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { ListRootsRequestSchema } from "@modelcontextprotocol/sdk/types.js";
import { z } from "zod";
// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "root-echo-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        "root-echo": {
          description: "A simple tool that returns 'pong'",
          parameters: {
            type: "object",
            properties: {},
            required: []
          }
        },
      }
    }
  }
);

// Register the ping tool
server.tool("root-echo", async (params) => {
  console.warn("root-echo", params)
  const roots = await server.server.listRoots()
  console.warn("roots", roots)
  return {
    content: [{
      type: "text",
      text: JSON.stringify(roots, null, 2)
    }]
  };
});

await server.connect(new StdioServerTransport()); 


================================================
FILE: src/shell-exec-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { exec, spawn } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

const server = new McpServer(
  {
    name: "shell-exec-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        executeCommand: {
          description: "Execute a shell command and return its output",
          parameters: {
            type: "object",
            properties: {
              command: {
                type: "string",
                description: "Command to execute"
              },
              timeout: {
                type: "integer",
                description: "Timeout in milliseconds",
                default: 30000
              }
            },
            required: ["command"]
          },
          async handler(params) {
            try {
              // Basic security check - prevent dangerous commands
              const dangerousCommands = ['rm -rf', 'mkfs', 'dd', '> /dev/'];
              if (dangerousCommands.some(cmd => params.command.includes(cmd))) {
                throw new Error('Command contains potentially dangerous operations');
              }

              const { stdout, stderr } = await execAsync(params.command, {
                timeout: params.timeout,
                maxBuffer: 1024 * 1024 // 1MB buffer
              });

              return {
                stdout,
                stderr,
                success: true
              };
            } catch (error) {
              if (error.signal === 'SIGTERM') {
                throw new Error('Command timed out');
              }
              throw new Error(`Command execution failed: ${error.message}`);
            }
          }
        },
        executeInteractiveCommand: {
          description: "Execute an interactive command with real-time output",
          parameters: {
            type: "object",
            properties: {
              command: {
                type: "string",
                description: "Command to execute"
              },
              args: {
                type: "array",
                items: {
                  type: "string"
                },
                description: "Command arguments"
              }
            },
            required: ["command"]
          },
          async handler(params) {
            return new Promise((resolve, reject) => {
              try {
                const child = spawn(params.command, params.args || []);
                let output = '';

                child.stdout.on('data', (data) => {
                  output += data.toString();
                });

                child.stderr.on('data', (data) => {
                  output += data.toString();
                });

                child.on('close', (code) => {
                  resolve({
                    output,
                    exitCode: code,
                    success: code === 0
                  });
                });

                child.on('error', (error) => {
                  reject(new Error(`Failed to start command: ${error.message}`));
                });
              } catch (error) {
                reject(new Error(`Failed to execute command: ${error.message}`));
              }
            });
          }
        }
      }
    }
  }
);

await server.connect(new StdioServerTransport()); 


================================================
FILE: src/sse-notification-stream.js
================================================
#!/usr/bin/env node

import express from "express";
import cors from "cors";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
import { z } from "zod";

// Create an MCP server instance
const server = new McpServer({
    name: 'simple-sse-server',
    version: '1.0.0',
  }, { capabilities: { logging: {} } });
  
  server.tool(
    'start-notification-stream',
    'Starts sending periodic notifications',
    {
      interval: z.number().describe('Interval in milliseconds between notifications').default(1000),
      count: z.number().describe('Number of notifications to send').default(10),
    },
    async ({ interval, count }, { sendNotification }) => {
      const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
      let counter = 0;
  
      // Send the initial notification
      await sendNotification({
        method: "notifications/message",
        params: {
          level: "info",
          data: `Starting notification stream with ${count} messages every ${interval}ms`
        }
      });
  
      // Send periodic notifications
      while (counter < count) {
        counter++;
        await sleep(interval);
  
        try {
          await sendNotification({
            method: "notifications/message",
            params: {
              level: "info",
              data: `Notification #${counter} at ${new Date().toISOString()}`
            }
          });
        }
        catch (error) {
          console.error("Error sending notification:", error);
        }
      }
  
      return {
        content: [
          {
            type: 'text',
            text: `Completed sending ${count} notifications every ${interval}ms`,
          }
        ],
      };
    }
  );
  
  const app = express();
  app.use(express.json());
  
  // Store transports by session ID
  const transports = {};
  
  // SSE endpoint for establishing the stream
  app.get('/mcp', async (req, res) => {
    console.log('Received GET request to /sse (establishing SSE stream)');
  
    try {
      // Create a new SSE transport for the client
      // The endpoint for POST messages is '/messages'
      const transport = new SSEServerTransport('/messages', res);
  
      // Store the transport by session ID
      const sessionId = transport.sessionId;
      transports[sessionId] = transport;
  
      // Set up onclose handler to clean up transport when closed
      transport.onclose = () => {
        console.log(`SSE transport closed for session ${sessionId}`);
        delete transports[sessionId];
      };
  
      // Connect the transport to the MCP server
      await server.connect(transport);
  
      // Start the SSE transport to begin streaming
      // This sends an initial 'endpoint' event with the session ID in the URL
      await transport.start();
  
      console.log(`Established SSE stream with session ID: ${sessionId}`);
    } catch (error) {
      console.error('Error establishing SSE stream:', error);
      if (!res.headersSent) {
        res.status(500).send('Error establishing SSE stream');
      }
    }
  });
  
  // Messages endpoint for receiving client JSON-RPC requests
  app.post('/messages', async (req, res) => {
    console.log('Received POST request to /messages');
  
    // Extract session ID from URL query parameter
    // In the SSE protocol, this is added by the client based on the endpoint event
    const sessionId = req.query.sessionId;
  
    if (!sessionId) {
      console.error('No session ID provided in request URL');
      res.status(400).send('Missing sessionId parameter');
      return;
    }
  
    const transport = transports[sessionId];
    if (!transport) {
      console.error(`No active transport found for session ID: ${sessionId}`);
      res.status(404).send('Session not found');
      return;
    }
  
    try {
      // Handle the POST message with the transport
      await transport.handlePostMessage(req, res, req.body);
    } catch (error) {
      console.error('Error handling request:', error);
      if (!res.headersSent) {
        res.status(500).send('Error handling request');
      }
    }
  });
  
  // Start the server
  const PORT = 3000;
  app.listen(PORT, () => {
    console.log(`Simple SSE Server (deprecated protocol version 2024-11-05) listening on port ${PORT}`);
  });
  
  // Handle server shutdown
  process.on('SIGINT', async () => {
    console.log('Shutting down server...');
  
    // Close all active transports to properly clean up resources
    for (const sessionId in transports) {
      try {
        console.log(`Closing transport for session ${sessionId}`);
        await transports[sessionId].close();
        delete transports[sessionId];
      } catch (error) {
        console.error(`Error closing transport for session ${sessionId}:`, error);
      }
    }
    await server.close();
    console.log('Server shutdown complete');
    process.exit(0);
  });


================================================
FILE: src/sse-ping-server.js
================================================
#!/usr/bin/env node

import express from "express";
import cors from "cors";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
import { z } from "zod";

// Create an MCP server instance
const server = new McpServer({
    name: 'simple-sse-server',
    version: '1.0.0',
  }, { capabilities: { logging: {} } });
  
  server.tool(
    'ping',
    'Returns "pong"',
    {},
    async () => {
      return {
        content: [
          {
            type: 'text',
            text: 'pong',
          }
        ],
      };
    }
  );
  
  
  const app = express();
  app.use(express.json());
  
  // Store transports by session ID
  const transports = {};
  
  // SSE endpoint for establishing the stream
  app.get('/mcp', async (req, res) => {
    console.log('Received GET request to /sse (establishing SSE stream)');
  
    try {
      // Create a new SSE transport for the client
      // The endpoint for POST messages is '/messages'
      const transport = new SSEServerTransport('/messages', res);
  
      // Store the transport by session ID
      const sessionId = transport.sessionId;
      transports[sessionId] = transport;
  
      // Set up onclose handler to clean up transport when closed
      transport.onclose = () => {
        console.log(`SSE transport closed for session ${sessionId}`);
        delete transports[sessionId];
      };
  
      // Connect the transport to the MCP server
      await server.connect(transport);
  
      // Start the SSE transport to begin streaming
      // This sends an initial 'endpoint' event with the session ID in the URL
      await transport.start();
  
      console.log(`Established SSE stream with session ID: ${sessionId}`);
    } catch (error) {
      console.error('Error establishing SSE stream:', error);
      if (!res.headersSent) {
        res.status(500).send('Error establishing SSE stream');
      }
    }
  });
  
  // Messages endpoint for receiving client JSON-RPC requests
  app.post('/messages', async (req, res) => {
    console.log('Received POST request to /messages');
  
    // Extract session ID from URL query parameter
    // In the SSE protocol, this is added by the client based on the endpoint event
    const sessionId = req.query.sessionId;
  
    if (!sessionId) {
      console.error('No session ID provided in request URL');
      res.status(400).send('Missing sessionId parameter');
      return;
    }
  
    const transport = transports[sessionId];
    if (!transport) {
      console.error(`No active transport found for session ID: ${sessionId}`);
      res.status(404).send('Session not found');
      return;
    }
  
    try {
      // Handle the POST message with the transport
      await transport.handlePostMessage(req, res, req.body);
    } catch (error) {
      console.error('Error handling request:', error);
      if (!res.headersSent) {
        res.status(500).send('Error handling request');
      }
    }
  });
  
  // Start the server
  const PORT = 3000;
  app.listen(PORT, () => {
    console.log(`Simple SSE Server (deprecated protocol version 2024-11-05) listening on port ${PORT}`);
  });
  
  // Handle server shutdown
  process.on('SIGINT', async () => {
    console.log('Shutting down server...');
  
    // Close all active transports to properly clean up resources
    for (const sessionId in transports) {
      try {
        console.log(`Closing transport for session ${sessionId}`);
        await transports[sessionId].close();
        delete transports[sessionId];
      } catch (error) {
        console.error(`Error closing transport for session ${sessionId}:`, error);
      }
    }
    await server.close();
    console.log('Server shutdown complete');
    process.exit(0);
  });


================================================
FILE: src/stderr-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";
// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "stderr-server",
    version: "1.0.0",
    capabilities: {
      tools: {
        "ping": {
          description: "A server that logs to stderr",
          parameters: {
            type: "object",
            properties: {},
            required: []
          }
        },
      }
    }
  }
);

// Register the ping tool
server.tool("log-to-stderr", async (params) => {
  console.error("This is logging to stderr");
  return {
    content: [{
      type: "text",
      text: "Should have logged to stderr"
    }]
  };
});

// Connect to the transport and start the server
await server.connect(new StdioServerTransport()); 

// This server implements basic ping and echo functionality with configurable response delays


================================================
FILE: src/stdout-server.js
================================================
#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

// THIS IS THE INTENTIONAL BAD LINE
console.log("Stdout server started - this should break the protocol!");

// Create a new MCP server with stdio transport
const server = new McpServer(
  {
    name: "stdout-server", // Changed server name
    version: "1.0.0",
    capabilities: {
      tools: {
        // Keeping a simple tool for completeness, though it might not be reachable
        "ping": { 
          description: "A simple tool that returns 'pong'",
          parameters: {
            type: "object",
            properties: {},
            required: []
          }
        },
      }
    }
  }
);

// Register the ping tool (might not be reachable due to stdout write)
server.tool("ping", async (params) => {
  return {
    content: [{
      type: "text",
      text: "pong"
    }]
  };
});


// Connect to the transport and start the server
// This part might fail or hang because of the stdout write
await server.connect(new StdioServerTransport()); 

// This server intentionally writes to stdout on startup, which violates MCP rules. 


================================================
FILE: .cursor/rules/create-server.mdc
================================================
---
description: 
globs: 
alwaysApply: true
---
To create a new server, copy the [ping-server.js](mdc:src/ping-server.js) for the pattern and use the MCP SDK documentation
Make sure to add it to [cli.js](mdc:src/cli.js) and [README.md](mdc:README.md)
Do not print anything to console.log since this is a stdio service and you can't write to it without breaking the protocol


================================================
FILE: .cursor/rules/.gitignore
================================================
personal/


